/*
 Copyright 2018 Ericsson AB.
 For a full list of individual contributors, please see the commit history.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
plugins{
    id 'java'
    id 'war'
    id 'maven'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

apply plugin: 'war'

war {
    baseName = 'generate-service'
    manifest {
		attributes('Main-Class': 'com.ericsson.eiffel.remrem.generate.App')
		attributes('remremVersionKey': 'serviceVersion')
		attributes('serviceVersion': version)
    }
}

apply plugin : 'application'
mainClassName = 'com.ericsson.eiffel.remrem.generate.App'

configurations.all {
    configurations.all {
        resolutionStrategy {
            // force certain versions of dependencies (including transitive)
            //  *append new forced modules:
            force 'com.fasterxml.jackson.core:jackson-databind:2.8.3'
            //  *replace existing forced modules with new ones:
            forcedModules = ['com.fasterxml.jackson.core:jackson-databind:2.8.3']
            
            // cache dynamic versions for 10 minutes
            cacheDynamicVersionsFor 10*60, 'seconds'
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

configurations {
    providedRuntime
    provided

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

processResources {
    expand(project.properties)
}

install.dependsOn assemble

apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'eclipse'

task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task integrationTest(type: Test) {
	jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/classes/integrationTest")
    }
    dependsOn integrationTestClasses
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath + sourceSets.main.output
    outputs.upToDateWhen { false }
}

project.tasks.remove(jar)

repositories {
    mavenCentral()
}

dependencies {
    compile('com.jayway.restassured:rest-assured:2.9.0')
    compile("org.springframework.boot:spring-boot-starter-web:$sprintBootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
  
    //ServletException requires compile time servlet dependency but it causes problems
    //when deployed if exist on war run time.. hence provided but also compileOnly
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-tomcat")
    
    //gson support
    compile('com.google.code.gson:gson:2.8.1')
    
    //swagger UI
    compile 'io.springfox:springfox-swagger2:2.6.1'
    compile 'io.springfox:springfox-swagger-ui:2.6.1'
    
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator:$sprintBootVersion")
    compile "org.springframework.boot:spring-boot:$sprintBootVersion"
	//end tag::actuator[]

    // Will be used to package contents of third party libs
    runtime fileTree(dir: 'libs', include: '*.jar')
}